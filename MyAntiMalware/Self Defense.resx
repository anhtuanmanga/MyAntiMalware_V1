<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAB//Z
</value>
  </data>
</root>