using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Security.Cryptography;
using System.Threading;

namespace MyAntiMalware
{
    public partial class Self_Defense : Form
    {
        int test;
        List<string> CSDL;
        List<string> hashtest;
        BackgroundWorker _backgroundWorker;
        delegate void setProgressBarMaxVaulue(int maxvalue);

        private void ProgressMaxValue(int maxvalue)
        {
            if (proBar.InvokeRequired)
            {
                var function = new setProgressBarMaxVaulue(ProgressMaxValue);
                this.Invoke(function, new object[] { maxvalue });
            }
            else
            {
                proBar.Maximum = maxvalue;
            }
        }

        public Self_Defense()
        {
            _backgroundWorker = new BackgroundWorker();
            _backgroundWorker.RunWorkerCompleted += _backgroundWorker_RunWorkerCompleted;
            _backgroundWorker.ProgressChanged += _backgroundWorker_ProgressChanged;
            _backgroundWorker.DoWork += _backgroundWorker_DoWork;
            _backgroundWorker.WorkerSupportsCancellation = true;
            _backgroundWorker.WorkerReportsProgress = true;
            InitializeComponent();
            CSDL = new List<string>();
            hashtest = new List<string>();
            //_backgroundWorker.RunWorkerAsync();
        }

        private void _backgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            proBar.Value = e.ProgressPercentage;
        }

        private void _backgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (Compare() == 0)
            {
                frmAV fm = new frmAV();
                fm.Show();
                Hide();
            }
            else
            {
                if (MessageBox.Show("Chương Trình Của Bạn Đã Bị Can Thiệp!\nVui Lòng Cài Lại!", "Canh Bao", MessageBoxButtons.OK, MessageBoxIcon.Warning) == DialogResult.OK)
                {
                    this.Close();
                }
            }
        }

        private void _backgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            LoadCDSL_test();
            Hash_Sofware();
            Compare();
        }
        private void LoadCDSL_test()
        {
            using (StreamReader sr = new StreamReader(@"D:\Work Space\MyAntiMalware\MyAntiMalware\MyAntiMalware\dbselfdefense.txt"))
            {
                string line;
                while ((line = sr.ReadLine()) != null)
                {
                    CSDL.Add(line);
                }
                sr.Close();
            }
        }
        private void Hash_Sofware()
        {
            SHA1 mySHA1 = SHA1Managed.Create();
            byte[] hashValue;
            DirectoryInfo dir = new DirectoryInfo(@"D:\Manga\Koe no Katachi\Vol 1");
            foreach (var file in dir.EnumerateFiles())
            {
                try
                {
                    //FileStream fileStream = new FileStream(@"C:\Users\Xuan Truong\Desktop\DoAn\MyAntiMalware\MyAntiMalware\dbmalware.dat", FileMode.Open, FileAccess.Read, FileShare.None);
                    FileStream fileStream = file.Open(FileMode.Open, FileAccess.Read);
                    fileStream.Position = 0;
                    hashValue = mySHA1.ComputeHash(fileStream);
                    fileStream.Close();
                    string tr = BitConverter.ToString(hashValue).Replace("-", "");
                    hashtest.Add(tr);
                }
                catch (IOException ex)
                {
                    StreamWriter writeStream = new StreamWriter("error.txt");
                    writeStream.WriteLine(ex.Message);
                    writeStream.Flush();
                    writeStream.Close();
                    //continue;
                }
            }
        }
        public int Compare()
        {
            //LoadCDSL_test();
            //Hash_Sofware();
            //proBar.Minimum = 0;
            ProgressMaxValue(hashtest.Count);
            //proBar.Value = 1;

            int i = 0;
            for (int j = 0; j < hashtest.Count; j++)
            {
                if (hashtest[j] == CSDL[i])
                {
                    test = 1;
                    i++;
                }
                else
                {
                    test = 0;
                }
                if (_backgroundWorker.IsBusy)
                {
                    Thread.Sleep(50);
                    _backgroundWorker.ReportProgress(j + 1);
                }
            }
            return test;
        }
        private void Self_Defense_Load(object sender, EventArgs e)
        {
            _backgroundWorker.RunWorkerAsync();
        }

        private void proBar_Click(object sender, EventArgs e)
        {
            //Compare();
        }
    }
}
