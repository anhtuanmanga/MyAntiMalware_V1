using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Windows.Forms;
using System.IO;
using System.Security.Cryptography;
using System.Reflection;
using System.Resources;
using WrapperWMander;
using System.Diagnostics;

namespace MyAntiMalware
{
    public partial class frmAV : Form
    {
        List<string> filePath;
        List<string> fileHash;
        delegate void SetTextCallback(string text1);
        delegate void setLabelText(string text);
        delegate void setButtonTest(string text);
        BackgroundWorker _backgroundWorker;
        List<string> _sourceVirusHash;
        int hour, min, sec, ms = 0;
        private int filecount = 0;
        private int numofvirus = 0;

        public frmAV()
        {
            InitializeComponent();
            _backgroundWorker = new BackgroundWorker();
            _backgroundWorker.RunWorkerCompleted += _backgroundWorker_RunWorkerCompleted;
            _backgroundWorker.ProgressChanged += _backgroundWorker_ProgressChanged;
            _backgroundWorker.DoWork += _backgroundWorker_DoWork;
            _backgroundWorker.WorkerSupportsCancellation = true;
            _backgroundWorker.WorkerReportsProgress = true;
            filePath = new List<string>();
            fileHash = new List<string>();
        }

        private void fileScanning(string text1)
        {
            if (this.labQuet.InvokeRequired)
            {
                setLabelText d = new setLabelText(fileScanning);
                this.Invoke(d, new object[] { text1 });
            }
            else
            {
                this.labQuet.Text = text1;
            }
        }

        private void fileCount(string text1)
        {
            if (this.lab_nuoffile.InvokeRequired)
            {
                setLabelText d = new setLabelText(fileCount);
                this.Invoke(d, new object[] { text1 });
            }
            else
            {
                this.lab_nuoffile.Text = text1;
            }
        }

        private void numOfVirusLabel(string text1)
        {
            if (this.lab_nuoffile.InvokeRequired)
            {
                setLabelText d = new setLabelText(numOfVirusLabel);
                this.Invoke(d, new object[] { text1 });
            }
            else
            {
                this.lab_numofvirus.Text = text1;
            }
        }

        private void ScanButton(string text1)
        {
            if (this.lab_nuoffile.InvokeRequired)
            {
                setButtonTest d = new setButtonTest(ScanButton);
                this.Invoke(d, new object[] { text1 });
            }
            else
            {
                this.btnScan.Text = text1;
            }
        }
        private void addListBox(string text1)
        {
            if (this.lbMalware.InvokeRequired)
            {
                SetTextCallback d = new SetTextCallback(addListBox);
                this.Invoke(d, new object[] { text1 });
            }
            else
            {
                this.lbMalware.Items.Add(text1);
            }

        }

        void _backgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            var backGroundWork = sender as BackgroundWorker;
            ScanButton("Stop");
            for (var i = 0; i < filePath.Count; i++)
            {
                //progressBar1.PerformStep();
                _totalSize += new DirectoryInfo(filePath[i]).EnumerateFiles("*", SearchOption.AllDirectories).Sum(fi => fi.Length);
            }
            for (var i = 0; i < filePath.Count; i++)
            {
                //progressBar1.PerformStep();
                DuyetFile(filePath[i]);
                if (backGroundWork.CancellationPending)
                {
                    e.Cancel = true;
                }
            }
            if (backGroundWork.CancellationPending)
            {
                e.Cancel = true;
            }
        }

        void _backgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            //Thread.Sleep(100);
            progressBar1.Value = e.ProgressPercentage;
        }

        void _backgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            progressBar1.Value = 100;
            timer1.Stop();
            ScanButton("Scan");
            fileScanning("Done!");
            groupBox1.Enabled = true;
            return;
        }
        private void reset()
        {
            ms = 0;
            hour = 0;
            min = 0;
            sec = 0;
            time_label.Text = "00:00:00.00";
            lab_nuoffile.Text = "0";
            lab_numofvirus.Text = "0";
            filecount = 0;
            numofvirus = 0;
            lbMalware.Items.Clear();
            filePath.Clear();
            fileHash.Clear();
            progressBar1.Minimum = 0;
            progressBar1.Maximum = 100;
            progressBar1.Value = 0;
        }
        private bool CheckVirus(string fileHash)
        {
            WrapperWMander.WrapperWuManber wuMander = new WrapperWuManber();
            wuMander.InitializeWrapper(new List<string>(_virusDatabase.Keys), false, false, false);
            bool check = (wuMander.SearchWrapper(fileHash.Length, fileHash, new List<string>(_virusDatabase.Keys)));
            wuMander.Dispose();
            wuMander.DisposeObj();
            wuMander = null;
            return check;
        }
        long _totalSize;
        long _sizeScanned;
        public void DuyetFile(string sf)
        {
            byte[] hashValue;
            DirectoryInfo dir = new DirectoryInfo(sf);
            this.fileScanning(sf);
            foreach (var file in dir.EnumerateFiles())
            {
                if (_backgroundWorker.CancellationPending)
                {
                    return;
                }
                try
                {
                    _sizeScanned += file.Length;
                    fileScanning(file.FullName);
                    using (FileStream fileStream = file.Open(FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                    {
                        SHA1 mySHA1 = SHA1Managed.Create();
                        fileStream.Position = 0;
                        hashValue = mySHA1.ComputeHash(fileStream);
                    }
                    string tr = BitConverter.ToString(hashValue).Replace("-", "");
                    filecount++;
                    fileCount(filecount.ToString());
                    //if (CheckVirus(tr))
                    //{
                    //    this.addListBox(file.FullName + " Virus: " + _virusDatabase[tr]);
                    //    numofvirus++;
                    //    numOfVirusLabel(numofvirus.ToString());
                    //}
                    //fileHash.Add(tr);
                    var percent = (int)(((decimal)_sizeScanned / _totalSize) * 100);
                    _backgroundWorker.ReportProgress(percent);
                }
                catch (IOException ex)
                {
                    using (StreamWriter writeStream = new StreamWriter("error.txt"))
                    {
                        writeStream.WriteLine(ex.Message);
                    }
                    continue;
                }
            }
            foreach (var subDir in dir.EnumerateDirectories())
            {
                try
                {
                    if (_backgroundWorker.CancellationPending)
                    {
                        return;
                    }
                    DuyetFile(subDir.FullName);
                }
                catch (Exception ex)
                {
                    using (StreamWriter writeStream = new StreamWriter("error.txt"))
                    {
                        writeStream.WriteLine(ex.Message);
                    }
                    continue;
                }
            }
            //DirectoryInfo dir = new DirectoryInfo(sf);
            //DirectoryInfo[] x;
            //try
            //{
            //    x = dir.GetDirectories();
            //}
            //catch
            //{
            //    return;
            //}
            //SHA1 mySHA1 = SHA1Managed.Create();
            //byte[] hashValue;
            //FileInfo[] files = dir.GetFiles();
            //foreach (FileInfo fInfo in files)
            //{
            //    try
            //    {
            //        FileStream fileStream = fInfo.Open(FileMode.Open, FileAccess.Read);
            //        //labQuet.Text = Path.GetFullPath(fInfo.FullName);
            //        fileScanning(Path.GetFullPath(fInfo.FullName));
            //        fileStream.Position = 0;
            //        hashValue = mySHA1.ComputeHash(fileStream);
            //        numoffile++;
            //        //lab_nuoffile.Text = numoffile.ToString();
            //        string tr = BitConverter.ToString(hashValue).Replace("-", "");
            //        //listBox1.Items.Add(tr);
            //    }
            //    catch (IOException)
            //    {
            //        fileScanning("Error!");
            //        // MessageBox.Show("Error!");
            //    }

            //}
            //foreach (DirectoryInfo f in x)
            //{
            //    if (f.Exists)
            //    {
            //        DuyetFile(f.FullName);
            //    }
            //}
        }
        Dictionary<string, string> _virusDatabase = new Dictionary<string, string>();
        private async void Form1_Load(object sender, EventArgs e)
        {
            //_sourceVirusHash = new List<string>(MyAntiMalware.Properties.Resources.dbmalware.Replace(System.Environment.NewLine, " ").Split(' ').Where(x => x != "" && x != "\n" && x != "\r" && x != " "));

            _sourceVirusHash = new List<string>();
            using (TextReader txtReader = new StringReader(MyAntiMalware.Properties.Resources.dbmalware))
            {
                var stringLine = "";
                while ((stringLine = await txtReader.ReadLineAsync()) != null)
                {
                    if (stringLine != String.Empty)
                    {
                        //stringLine = stringLine.Remove(stringLine.LastIndexOf(':'));
                        _sourceVirusHash.Add(stringLine);
                    }
                }
            }
            var numberLine = _sourceVirusHash.Count;
            string[] temp = new string[2];
            int i = 0;
            try
            {
                for (i = 0; i < numberLine; i++)
                {
                    temp = _sourceVirusHash[i].Split(':');
                    _virusDatabase.Add(temp[0], temp[1]);
                }
            }
            catch (Exception ex)
            {
                for (int a = 0; a < temp.Length; a++)
                {
                    Debug.WriteLine(temp);
                }
                Debug.WriteLine(ex.Message);
                return;
            }

            reset();
        }

        private void button1_Click(object sender, EventArgs e)
        {

            if (this.rBQuick.Checked == true)
            {
                if (btnScan.Text == "Scan")
                {
                    reset();
                    groupBox1.Enabled = false;
                    filePath.Add(@"C:\Windows");
                    _backgroundWorker.RunWorkerAsync();
                    timer1.Start();
                }
                else
                {
                    _backgroundWorker.CancelAsync();
                    timer1.Stop();
                    btnScan.Text = "Scan";
                    groupBox1.Enabled = true;
                }
            }
            if (this.rbFull.Checked == true)
            {
                if (btnScan.Text == "Scan")
                {
                    reset();
                    groupBox1.Enabled = false;
                    filePath.Add(@"C:\");
                    filePath.Add(@"D:\");
                    filePath.Add(@"E:\");
                    _backgroundWorker.RunWorkerAsync();
                    timer1.Start();
                }
                else
                {
                    _backgroundWorker.CancelAsync();
                    timer1.Stop();
                    btnScan.Text = "Scan";
                    groupBox1.Enabled = true;
                }
            }
            if (this.rbPar.Checked == true)
            {
                reset();
                for (int i = 0; i < checkedListBox1.SelectedItems.Count; i++)
                {
                    if (checkedListBox1.GetItemChecked(0))
                    {
                        filePath.Add("C:\\");
                    }
                    if (checkedListBox1.GetItemChecked(1))
                    {
                        filePath.Add("D:\\");
                    }
                    if (checkedListBox1.GetItemChecked(2))
                    {
                        filePath.Add("E:\\");
                    }
                }
                if (btnScan.Text == "Scan")
                {
                    groupBox1.Enabled = false;
                    _backgroundWorker.RunWorkerAsync();
                    timer1.Start();
                }
                else
                {
                    _backgroundWorker.CancelAsync();
                    timer1.Stop();
                    btnScan.Text = "Scan";
                    groupBox1.Enabled = true;
                }
            }
            if (this.rbFolder.Checked == true)
            {
                if (btnScan.Text == "Scan")
                {
                    reset();
                    groupBox1.Enabled = false;
                    FolderBrowserDialog fbd = new FolderBrowserDialog();
                    if (fbd.ShowDialog() == DialogResult.OK)
                    {
                        filePath.Add(fbd.SelectedPath);
                        _backgroundWorker.RunWorkerAsync();
                        timer1.Start();
                    }
                }

                else
                {
                    _backgroundWorker.CancelAsync();
                    timer1.Stop();
                    btnScan.Text = "Scan";
                    groupBox1.Enabled = true;
                }
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            time_label.Text = String.Format(hour.ToString("D2") + ":" + min.ToString("D2") + ":" + sec.ToString("D2") + "." + ms.ToString("D2"));
            ms++;
            if (ms >= 99)
            {
                sec++;
                ms = 0;
            }
            else
            {
                ms++;
            }
            if (sec > 60)
            {
                min++;
                sec = 00;
            }
            if (min > 60)
            {
                hour++;
                min = 00;
            }
            if (hour > 99)
            {
                timer1.Stop();
            }
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void checkedListBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void rbPar_CheckedChanged(object sender, EventArgs e)
        {
            if (this.rbPar.Checked == true)
            {
                grbcheck.Visible = true;
                checkedListBox1.Items.Clear();
                foreach (string s in Directory.GetLogicalDrives())
                {
                    DriveInfo drinfo = new DriveInfo(s);
                    if (drinfo.DriveType == DriveType.Fixed)
                    {
                        checkedListBox1.Items.Add(drinfo.VolumeLabel + "(" + s.Substring(0, 1) + ")");
                    }
                }
            }
            else
            {
                grbcheck.Visible = false;
            }
        }
    }
}
