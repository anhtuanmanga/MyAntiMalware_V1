#include "stdafx.h"
#include "WrapperWuManber.h"

using namespace System;
using namespace System::Runtime::InteropServices;

WrapperWMander::WrapperWuManber::WrapperWuManber()
{
	myWuManber = new WuManber();
}

WrapperWMander::WrapperWuManber::~WrapperWuManber()
{
	myWuManber->~WuManber();
}
void WrapperWMander::WrapperWuManber::DisposeObj()
{
	myWuManber->DisposeObj();
}

void WrapperWMander::WrapperWuManber::InitializeWrapper(System::Collections::Generic::List<System::String^>^ list, bool bCaseSensitive, bool bIncludeSpecialCharacters, bool bIncludeExtendedAscii)
{
	vector<const char*> patterns;
	for (size_t i = 0; i < list->Count; i++)
	{
		patterns.push_back(static_cast<const char*>(Marshal::StringToHGlobalAnsi(list[i]).ToPointer()));
		//patterns.push_back(msclr::interop::marshal_as<std::string>(%*list[i]).c_str());
	}
	myWuManber->Initialize(patterns);
	Marshal::FreeHGlobal(IntPtr(&patterns));
}

bool WrapperWMander::WrapperWuManber::SearchWrapper(int TextLength, System::String^ Text, System::Collections::Generic::List<System::String^>^ list)
{
	vector<const char*> patterns;
	for (size_t i = 0; i < list->Count; i++)
	{
		patterns.push_back(static_cast<const char*>(Marshal::StringToHGlobalAnsi(list[i]).ToPointer()));
		Marshal::FreeHGlobal(Marshal::StringToHGlobalAnsi(list[i]));
		//patterns.push_back(msclr::interop::marshal_as<std::string>(%*list[i]).c_str());
	}
	const char* textCheck = static_cast<const char*>(Marshal::StringToHGlobalAnsi(Text).ToPointer());
	bool check = myWuManber->Search(TextLength, textCheck, patterns);
	Marshal::FreeHGlobal(IntPtr(&patterns));
	Marshal::FreeHGlobal(IntPtr((void*)textCheck));
	return check;
}